searchState.loadedDescShard("poise", 4, "Attempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with shared read access.\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nAttempts to acquire this <code>RwLock</code> with exclusive write …\nDispatched when a user starts typing.\nDispatched when the bot’s data is updated.\nDispatched when a voice channel’s status is updated.\nDispatched when a guild’s voice server was updated (or …\nDispatched when a user joins, leaves or moves to a voice …\nDispatched when a guild’s webhook is updated.\nCreates a new instance of an <code>RwLock&lt;T&gt;</code> which is unlocked …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nLocks this <code>RwLock</code> with exclusive write access, causing the …\nURL that the client’s shards will use to connect to the …\nWhich permissions the bot had\nWhich permissions were required for the operation\nError that can be return by <code>validate</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates that a token is likely in a valid format.\nParse a value from a string in context of a received …\nError that can be returned from <code>Channel::convert</code>.\nDescribes formatting on string content\nFormatting modifiers for MessageBuilder content pushes\nStruct that allows to alter <code>content_safe</code>’s behaviour.\nConvenience builder to create a modal, wait for the user …\nA builder for constructing a personal <code>Message</code> instance.\nA trait with additional functionality over the …\nError that can be returned from <code>Emoji::convert</code>.\nThe associated error which can be returned from parsing.\nGuild was not in cache, or guild HTTP request failed.\nRepresents a combination of a timestamp and a style for …\nAn error that can occur when parsing a <code>FormattedTimestamp</code> …\nEnum representing various styles for formatting time in …\nError that can be returned from <code>GuildChannel::convert</code>.\nThe guild in which the parser was invoked is not in cache.\nError that can be returned from <code>Guild::convert</code>.\nWhen message data retrieval via HTTP failed\nWhen channel retrieval via HTTP failed\nWhen channel retrieval via HTTP failed\nHTTP error while retrieving guild roles.\nWhen the <code>gateway</code> feature is disabled and the required …\nRepresents a long date format, e.g., “November 17, 2023…\nRepresents a long date and time format, e.g., “Thursday, …\nRepresents a long time format, e.g., “12:34:56 PM”.\nWhen the provided string does not adhere to any known …\nError that can be returned from <code>Member::convert</code>.\nThe Message Builder is an ergonomic utility to easily …\nError that can be returned from <code>Message::convert</code>.\nNo cache, so no guild search could be done.\nWhen the referenced channel is not a guild channel\nThe provided member string failed to parse, or the parsed …\nThe provided user string failed to parse, or the parsed …\nThe provided channel string failed to parse, or the parsed …\nThe provided channel string failed to parse, or the parsed …\nThe provided guild string failed to parse, or the parsed …\nThe provided channel string failed to parse, or the parsed …\nThe provided emoji string failed to parse, or the parsed …\nWhen the guild’s roles were not found in cache.\nWhen the operation was invoked outside a guild.\nParser was invoked outside a guild.\nParser was invoked outside a guild.\nRepresents a relative time format, indicating the time …\nError that can be returned from <code>Role::convert</code>.\nRepresents a short date format, e.g., “2023-11-17”.\nRepresents a short date and time format, e.g., “November …\nRepresents a short time format, e.g., “12:34 PM”.\nError that can be returned from <code>User::convert</code>.\nTransforms role, channel, user, <code>@everyone</code> and <code>@here</code> …\nParses a string <code>s</code> as a command parameter of this type.\nErrors\nAdds an input text field.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvenience method to add a multi-line input text field.\nRetrieves an Id from a channel mention.\nRetrieves the animated state, name and Id from an emoji …\nRetrieves the “code” part of an invite out of a URL.\nRetrieves IDs from “{channel ID}-{message ID}” …\nRetrieves guild, channel, and message ID from a message …\nTurns a string into a vector of string arguments, …\nRetrieves an Id from a role mention.\nRetrieves an Id from a user mention.\nRetrieves the username and discriminator out of a user tag …\nParses the id and token from a webhook url. Expects a …\nPushes a named link to a message, intended for use in …\nPushes a named link intended for use in an embed, but with …\nCalculates the Id of the shard responsible for a guild, …\nConvenience method to add a single-line input text field.\nSets a timeout when waiting for the modal response.\nValidates that a token is likely in a valid format.\nExpected a certain argument type at a certain position in …\nImplemented for all types that can be used in a context …\nHTTP error occurred while retrieving the model type from …\nThe argument passed by the user is invalid in this …\nA string parameter was found, but it could not be parsed …\nPossible errors when parsing slash command arguments\nImplement this trait on types that you want to use as a …\nIf this is a choice parameter, returns the choices\nIf this is a choice parameter, returns the choices\nCreate a slash command parameter equivalent to type T.\nFull version of <code>crate::SlashArgument::create</code>.\nExtract a Rust value of type T from the slash command …\nFull version of <code>crate::SlashArgument::extract</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMacro for extracting and parsing slash command arguments …\nFull version of <code>crate::SlashArgument::choices</code>.\nConvert an action function pointer that takes Self as an …\nA short string describing what specifically is …\nError that occurred while parsing the string into the …\nOriginal input string\nApplication command context\nApplication command specific context passed to command …\nA command argument failed to parse from the Discord …\nInvoked from an autocomplete interaction\nType returned from <code>#[poise::command]</code> annotated functions, …\nInvoked from an application command\nError occurred during command execution\nProvided pre-command check either errored, or returned …\nSpecifies if the current invokation is from a Command or …\nPanic occurred at any phase of command execution after …\nA single parameter of a <code>crate::Command</code>\nA single drop-down choice in a slash command choice …\nExpected a certain argument type at a certain position in …\nWrapper around either <code>crate::ApplicationContext</code> or …\nPossible actions that a context menu entry can have\nCommand was invoked before its cooldown expired\nCommand was invoked but the channel was a non-DM channel\n<code>crate::PrefixFrameworkOptions::dynamic_prefix</code> or …\nUser code threw an error in generic event event handler\nAny error that can occur while the bot runs. Either thrown …\nFramework configuration\nCommand was invoked but the channel was a DM channel\nA case-sensitive string literal prefix (passed to …\nContext menu entry on a message\nThe invocation message was posted directly (common case)\nThe event that triggered a prefix command execution\nThe message was edited, and was already a valid invocation …\nThe message was edited, and was not a valid invocation …\nCommand was invoked but the bot is lacking the permissions …\nCommand was invoked but the user is lacking the …\nAn error occurred in …\nA non-owner tried to invoke an owners-only command\nCommand was invoked but the channel wasn’t a NSFW channel\nTrimmed down, more general version of <code>Context</code>\nPossible ways to define a command prefix\nPrefix command context\nPrefix-specific context passed to command invocations.\nPrefix-specific framework configuration\nRegular expression which matches the prefix\nUser code threw an error in user data setup\nCommand was invoked without specifying a subcommand, but …\nA message had the correct prefix but the following string …\nThe command name from the interaction is unrecognized\nContext menu entry on a user\nThe function that is called to execute the actual command\nList of additional bot prefixes\nAlternative triggers for the command (prefix-only)\nDefault set of allowed mentions to use for all responses\nEntire argument string\nSlash command arguments\nGet the author of the command message or application …\nGet the author of the command message or application …\nGet the author of the command message or application …\nID of the invocation author\nReturns the author of the invoking message or interaction, …\nReturns the author of the invoking message or interaction, …\nReturns the author of the invoking message or interaction, …\nOptionally, a callback that is invoked on autocomplete …\nWhether to broadcast a typing indicator while executing …\nReturns serenity’s cache which stores various useful …\nReturns serenity’s cache which stores various useful …\nReturns serenity’s cache which stores various useful …\nWhether command names should be compared …\nIdentifier for the category that this command will be …\nReturn the channel ID of this context\nReturn the channel ID of this context\nReturn the channel ID of this context\nID of the invocation channel\nIf this parameter is a channel, users can only enter these …\nIf any of these functions returns false, this command will …\nIf this parameter is a choice parameter, this is the fixed …\nReturns a reference to the command.\nAdd a new command to the framework\nReturns a reference to the command.\nReturns a reference to the command.\nThe command object which is the current command\nThe command object which is the current command\nProvide a callback to be invoked before every command. The …\nList of commands in the framework\nCallback to execute when this command is invoked in a …\nContext menu specific name for this command, displayed in …\nConfiguration for the <code>crate::CooldownTracker</code>\nCreate a <code>crate::CooldownContext</code> based off the underlying …\nCreate a <code>crate::CooldownContext</code> based off the underlying …\nCreate a <code>crate::CooldownContext</code> based off the underlying …\nHandles command cooldowns. Mainly for framework internal …\nGenerates a context menu command builder from this <code>Command</code> …\nGenerates a slash command builder from this <code>Command</code> …\nGenerates a slash command parameter builder from this …\nReturn the datetime of the invoking message or interaction\nReturn the datetime of the invoking message or interaction\nReturn the datetime of the invoking message or interaction\nReturns the <code>crate::Context</code> of this error, if it has one\nArbitrary data, useful for storing custom metadata about …\nReturn a reference to your custom user data\nReturn a reference to your custom user data\nReturn a reference to your custom user data\nYour custom user data\nYour custom user data\nYour custom user data\nPermissions which users must have to invoke this command. …\nDefer the response, giving the bot multiple minutes to …\nDefer the response, giving the bot multiple minutes to …\nDefer the response, giving the bot multiple minutes to …\nSee <code>Self::defer()</code>\nSee <code>Self::defer()</code>\nSee <code>Self::defer()</code>\nIf this is an application command, <code>Self::defer()</code> is called\nIf this is an application command, <code>Self::defer()</code> is called\nIf this is an application command, <code>Self::defer()</code> is called\nSee <code>crate::Context::defer()</code>\nShort description of the command. Displayed inline in help …\nDescription of the command. Required for slash commands\nLocalized descriptions with locale string as the key …\nLocalized descriptions with locale string as the key …\nSee <code>Self::serenity_context</code>.\nSee <code>Self::serenity_context</code>.\nSee <code>Self::serenity_context</code>.\nIf true, the command may only run in DMs\nCallback invoked on every message to return a prefix.\nIf Some, the framework will react to message edits by …\nWhether responses to this command should be ephemeral by …\nCalled on every Discord event. Can be used to react to …\nWhether commands in messages emitted by this bot itself …\nIf the user makes a typo in their message and a subsequent …\nReturns a view into data stored by the framework, like …\nReturns a view into data stored by the framework, like …\nReturns a view into data stored by the framework, like …\nUseful if you need the list of commands, for example for a …\nRead-only reference to the framework\nRead-only reference to the framework\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the guild of this context, if we are inside a guild.\nReturn the guild of this context, if we are inside a guild.\nReturn the guild of this context, if we are inside a guild.\nReturn the guild channel of this context, if we are inside …\nReturn the guild channel of this context, if we are inside …\nReturn the guild channel of this context, if we are inside …\nReturns the guild ID of this context, if we are inside a …\nReturns the guild ID of this context, if we are inside a …\nReturns the guild ID of this context, if we are inside a …\nID of the guild, if not invoked in DMs\nIf true, only people in guilds may use this command\nCalls the appropriate <code>on_error</code> function (command-specific …\nKeeps track of whether an initial response has been sent.\nMultiline description with detailed usage instructions. …\nWhether to hide this command in help menus.\nReturns serenity’s raw Discord API client to make raw …\nReturns serenity’s raw Discord API client to make raw …\nReturns serenity’s raw Discord API client to make raw …\nReturn a ID that uniquely identifies this command …\nReturn a ID that uniquely identifies this command …\nReturn a ID that uniquely identifies this command …\nA string to identify this particular command within a list …\nWhether to ignore messages from bots for command invoking. …\nWhether to ignore message edits on messages that have not …\nWhether to ignore commands contained within thread …\nIf true, <code>Self::owners</code> is automatically initialized with …\nIf set and <code>Self::initialize_owners</code> is <code>true</code>, the selected …\nThe interaction which triggered this command execution.\nThe type of the interaction which triggered this command …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to get the invocation data with the requested type\nAttempts to get the invocation data with the requested type\nAttempts to get the invocation data with the requested type\nCustom user data carried across a single command invocation\nCustom user data carried across a single command invocation\nReturns the string with which this command was invoked.\nReturns the string with which this command was invoked.\nReturns the string with which this command was invoked.\nWhether to rerun the command if an existing invocation …\nReturns the command name that this command was invoked with\nReturns the command name that this command was invoked with\nReturns the command name that this command was invoked with\nCommand name used by the user to invoke this command\nRenamed to <code>Self::event_handler</code>!\nIf available, returns the locale (selected language) of …\nIf available, returns the locale (selected language) of …\nIf available, returns the locale (selected language) of …\nLocalized labels with locale string as the key (slash-only)\nIf <code>true</code>, disables automatic cooldown handling before every …\nif <code>true</code>, disables automatic cooldown handling before this …\nTreat a bot mention (a ping) like a prefix\nThe invoking user message\nMain name of the command. Aliases (prefix-only) can be set …\nLabel of this choice\nName of this command parameter\nLocalized names with locale string as the key (slash-only)\nLocalized names with locale string as the key (slash-only)\nCallback for all non-command messages. Useful if you want …\nIf true, the command may only run in NSFW channels\nProvide a callback to be invoked when any user code yields …\nCommand-specific override for …\nUser IDs which are allowed to use owners_only commands\nIf true, only users from the owners list may use this …\nList of parameters for this command\nIf the invoked command was a subcommand, these are the …\nIf the invoked command was a subcommand, these are the …\nIf the invoked command was a subcommand, these are the …\nIf the invoked command was a subcommand, these are the …\nIf the invoked command was a subcommand, these are the …\nReturn the partial guild of this context, if we are inside …\nReturn the partial guild of this context, if we are inside …\nReturn the partial guild of this context, if we are inside …\nReturns the current gateway heartbeat latency (…\nReturns the current gateway heartbeat latency (…\nReturns the current gateway heartbeat latency (…\nCalled after every command if it was successful (returned …\nCalled before every command\nReturns the prefix this command was invoked with, or a …\nReturns the prefix this command was invoked with, or a …\nReturns the prefix this command was invoked with, or a …\nPrefix used by the user to invoke this command\nThe main bot prefix. Can be set to None if the bot …\nCallback to execute when this command is invoked in a …\nPrefix command specific options.\nFull name including parent command names.\nLike <code>Self::say</code>, but formats the message as a reply to the …\nLike <code>Self::say</code>, but formats the message as a reply to the …\nLike <code>Self::say</code>, but formats the message as a reply to the …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nBuilds a <code>crate::CreateReply</code> by combining the builder …\nInvoked before every message sent using <code>crate::Context::say</code>…\nIf <code>true</code>, changes behavior of guild_only command check to …\n<code>true</code> is this parameter is required, <code>false</code> if it’s …\nPermissions without which command execution will fail. You …\nPermissions which users must have to invoke this command. …\nRe-runs this entire command invocation\nRe-runs this entire command invocation\nRe-runs this entire command invocation\nAfter the first response, whether to post subsequent …\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::say_reply</code>\nShorthand of <code>crate::send_reply</code>\nShorthand of <code>crate::send_reply</code>\nShorthand of <code>crate::send_reply</code>\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturn the stored <code>serenity::Context</code> within the underlying …\nReturns the <code>serenity::Context</code> of this error\nSerenity’s context, like HTTP or cache\nSerenity’s context, like HTTP or cache\nSerenity’s context, like HTTP or cache\nStores the given value as the data for this command …\nStores the given value as the data for this command …\nStores the given value as the data for this command …\nIf set to true, skips command checks if command was issued …\nCallback to execute when this command is invoked in a …\nThe name of the <code>#[poise::command]</code>-annotated function\nCallback invoked on every message to strip the prefix off …\nRequire a subcommand to be invoked\nSubcommands of this command, if any\nWhether to delete the bot response if an existing …\nHow this command invocation was triggered\nClosure that sets this parameter’s type and min/max …\nThe serenity Context passed to the event\nThe serenity context passed to the event handler\nGeneral context\nGeneral context\nCommand context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nGeneral context\nSerenity’s Context\nSerenity’s Context\nSerenity’s Context\nDiscord Ready event data present during setup\nDeveloper-readable description of the type mismatch\nError which was thrown in the setup code\nError which was thrown in the event handler code\nError which was thrown in the command code\nError which was thrown by the parameter type’s parsing …\nIf execution wasn’t aborted because of an error but …\nError which was thrown in the dynamic prefix code\nThe error thrown by user code\nWhich event was being processed when the error occurred\nThe Framework passed to the event\nThe Framework passed to the event\nFramework context\nFramework context\nFramework context\nIf applicable, the input on which parsing failed\nThe interaction in question\nSee <code>crate::Context::invocation_data</code>\nWhich permissions in particular the bot is lacking for …\nList of permissions that the user is lacking. May be None …\nMessage which the dynamic prefix callback was evaluated …\nThe message in question\nThe interaction in question\nThe rest of the message (after the prefix) which was not …\nPanic payload which was thrown in the command code\nThe prefix that was recognized\nTime until the command may be invoked for the next time in …\nWhich event triggered the message parsing routine\nStores messages and the associated bot responses in order …\nGiven a message by a user, find the corresponding bot …\nCreate an edit tracker which tracks messages for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemoves this command invocation from the cache and returns …\nReturns a copy of a newly up-to-date cached message, or a …\nForget all of the messages that are older than the …\nNotify the <code>EditTracker</code> that the given user message should …\nStore that this command is currently running; so that if …")